
两个最基本的java回收算法：复制算法和标记清理算法
                复制算法：两个区域A和B，初始对象在A，继续存活的对象被转移到B。此为新生代最常用的算法
                标记清理：一块区域，标记要回收的对象，然后回收，一定会出现碎片，那么引出
                标记-整理算法：多了碎片整理，整理出更大的内存放更大的对象
两个概念：新生代和年老代
                新生代：初始对象，生命周期短的
                永久代：长时间存在的对象
整个java的垃圾回收是新生代和年老代的协作，这种叫做分代回收。
P.S：Serial New收集器是针对新生代的收集器，采用的是复制算法
         Parallel New（并行）收集器，新生代采用复制算法，老年代采用标记整理
         Parallel  Scavenge（并行）收集器，针对新生代，采用复制收集算法
        Serial Old（串行）收集器，新生代采用复制，老年代采用标记清理
         Parallel   Old（并行）收集器，针对老年代，标记整理
        CMS收集器，基于标记清理
        G1收集器：整体上是基于标记清理，局部采用复制

综上：新生代基本采用复制算法，老年代采用标记整理算法。cms采用标记清理。




1.Serial New/Serial Old

    Serial/Serial Old收集器是最基本最古老的收集器，它是一个单线程收集器，并且在它进行垃圾收集时，必须暂停所有用户线程。Serial New收集器是针对新生代的收集器，采用的是Copying算法，Serial Old收集器是针对老年代的收集器，采用的是Mark-Compact算法。它的优点是实现简单高效，但是缺点是会给用户带来停顿。

2.Parallel New

    Parallel New收集器是Serial收集器的多线程版本(参照Serial New)，使用多个线程进行垃圾收集。

3.Parallel Scavenge

    Parallel Scavenge收集器是一个新生代的多线程收集器（并行收集器），它在回收期间不需要暂停其他用户线程，其采用的是Copying算法，该收集器与前两个收集器有所不同，它主要是为了达到一个可控的吞吐量。

4.Parallel Old

    Parallel Old是Parallel Scavenge收集器的老年代版本（并行收集器），使用多线程和Mark-Compact算法。

5.CMS

    CMS（Current Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器，它是一种并发收集器，采用的是Mark-Sweep算法。

6.G1

    G1收集器是当今收集器技术发展最前沿的成果，它是一款面向服务端应用的收集器，它能充分利用多CPU、多核环境。因此它是一款并行与并发收集器，并且它能建立可预测的停顿时间模型。
